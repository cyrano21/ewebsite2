
# Documentation du problème "Gérer ce produit"

## Problème
Lorsque l'utilisateur clique sur le bouton "Gérer ce produit" depuis la page de détail d'un produit, le système devrait ouvrir le modal d'édition du produit existant. Cependant, le modal s'ouvre en mode "Ajout de produit" au lieu du mode "Modification de produit".

## Fichiers concernés

### 1. components/shop/SingleProduct.jsx
```javascript
// Ligne ~320-350
{user?.role === 'admin' && (
  <Button
    className="admin-manage-btn"
    variant="warning"
    onClick={() => {
      // Préparer les données du produit pour l'édition
      const productForEdit = {
        id: product._id || product.id,
        name: product.name || '',
        category: product.category || '',
        price: product.price || 0,
        stock: product.stock || 0,
        img: product.image || product.img || '',
        vendor: product.vendor || '',
        ratings: product.rating || product.ratings || 0,
        ratingsCount: product.reviewCount || product.ratingsCount || 0,
        description: product.description || '',
      };
      
      // Stocker temporairement les données dans sessionStorage
      sessionStorage.setItem('editProductData', JSON.stringify(productForEdit));
      
      // Rediriger vers la page d'admin avec indication d'édition
      router.push(`/admin/products/${product._id || product.id}?edit=true`);
    }}
  >
    Gérer ce produit
  </Button>
)}
```

### 2. pages/admin/products/[id].js
```javascript
const ProductEditPage = () => {
  const router = useRouter();
  const { id, edit } = router.query;
  const [productData, setProductData] = useState(null);

  useEffect(() => {
    // Récupérer les données du produit depuis sessionStorage si disponibles
    if (typeof window !== 'undefined' && edit === 'true') {
      const storedData = sessionStorage.getItem('editProductData');
      if (storedData) {
        try {
          const parsedData = JSON.parse(storedData);
          // Garantir la présence d'un ID valide
          const validatedProductData = {
            ...parsedData,
            id: parsedData.id || parsedData._id, // Assurer la cohérence de l'ID
            isEditMode: true // Marquer explicitement pour l'édition
          };

          console.log("Données produit validées pour édition:", validatedProductData);
          setProductData(validatedProductData);
          // Effacer les données après récupération
          sessionStorage.removeItem('editProductData');
        } catch (error) {
          console.error("Erreur lors de la récupération des données du produit:", error);
        }
      }
    }
  }, [edit]);

  return (
    <AdminLayout>
      <ProductManagement editProductId={id} productDataFromShop={productData} />
    </AdminLayout>
  );
};
```

### 3. components/admin/ProductManagement.jsx
```javascript
// Effet pour ouvrir le modal si un ID est passé en props
useEffect(() => {
  console.log("=== PRODUCT MANAGEMENT DEBUG ===");
  console.log("productDataFromShop:", productDataFromShop);
  console.log("editProductId:", editProductId);

  // Si on a reçu des données directement de la page produit
  if (productDataFromShop) {
    console.log("Données reçues directement de la page produit:", productDataFromShop);

    // S'assurer que l'ID est présent et correctement formaté avec mode édition explicite
    const cleanProductData = {
      ...productDataFromShop,
      id: productDataFromShop.id || productDataFromShop._id || `temp-${Date.now()}`, // Garantir un ID valide
      isEditMode: true, // Flag EXPLICITE pour le mode édition
      _isFromShop: true, // Marqueur supplémentaire pour signaler l'origine
      _editMode: true,   // Marqueur additionnel pour l'édition
      forcedEditMode: true // Encore un marqueur pour être sûr
    };

    console.log("IMPORTANT - Données produit pour ÉDITION:", cleanProductData);

    // Forcer le titre du modal à "Modifier le produit"
    setTimeout(() => {
      console.log("Application du titre modal forcé");
      const modalTitleElement = document.querySelector('.modal-title');
      if (modalTitleElement) {
        modalTitleElement.innerHTML = '<i class="icofont-edit me-2"></i>Modifier le produit';
        console.log("Titre modal modifié");
      } else {
        console.log("Élément de titre modal non trouvé");
      }
    }, 50);

    console.log("Avant setCurrentProductData et openProductModal");
    setCurrentProductData(cleanProductData);
    openProductModal();
    console.log("Modal ouvert avec données d'édition");
    return;
  }

  // Sinon, chercher le produit par ID dans la liste des produits
  if (editProductId && products.length > 0) {
    const productToEdit = products.find(p => 
      p._id === editProductId || 
      p.id === editProductId ||
      p.legacyId === editProductId
    );

    if (productToEdit) {
      handleShowEditModal(productToEdit);
    }
  }
}, [editProductId, products, productDataFromShop]);
```

### 4. components/admin/ProductManagement/ProductModal.jsx
```javascript
// Déterminer le mode d'édition de manière sûre sans références circulaires
const isEditMode = React.useMemo(() => {
  if (!productData) return false;

  return Boolean(
    modalTitle?.includes("Modifier") || 
    productData?.isEditMode === true || 
    productData?._editMode === true ||
    productData?.forcedEditMode === true ||
    productData?.id ||
    productData?._id ||
    productData?._isFromShop === true
  );
}, [modalTitle, productData]);
```

## Problèmes potentiels

1. **Transmission du mode d'édition**: Malgré tous les drapeaux et marqueurs utilisés pour indiquer qu'il s'agit d'un mode d'édition, le modal continue à s'ouvrir en mode création.

2. **Détection du mode dans ProductModal**: La détection du mode d'édition dans ProductModal pourrait ne pas fonctionner correctement malgré la présence des drapeaux.

3. **Ordre d'exécution**: Il est possible que certaines initialisations ou mises à jour d'état se produisent dans un ordre qui efface les marqueurs d'édition.

4. **Timing des effets**: Les useEffect dans les différents composants peuvent s'exécuter dans un ordre qui cause des conflits.

5. **Problème avec useModalState**: Le hook personnalisé useModalState pourrait ne pas conserver correctement les données d'état entre les rendus.

## Solutions potentielles

1. Mettre à jour `useModalState.js` pour qu'il gère explicitement le mode d'édition.
2. Modifier directement le titre du modal après l'avoir ouvert.
3. Simplifier la chaîne de passage de données entre les composants.
4. Ajouter une vérification supplémentaire dans le modal pour forcer le mode d'édition.
5. Implémenter un gestionnaire d'état global (comme Redux ou Context API) pour gérer les états des modaux.
