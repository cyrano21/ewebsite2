/** @type {import('next').NextConfig} */
const path = require('path');

const nextConfig = {
  // Désactiver temporairement le mode strict pour éviter les doubles rendus
  reactStrictMode: false,

  // Gardez ces lignes si vous avez besoin d'ignorer les erreurs ESLint/TypeScript
  // pendant la build, mais l'idéal est de corriger ces erreurs.
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },

  // Votre configuration pour les images
  images: {
    domains: ['localhost', 'res.cloudinary.com'],
    remotePatterns: [{ protocol: 'https', hostname: '**' }],
  },

  // Votre configuration pour SASS
  sassOptions: {
    includePaths: ['./styles'], // Assurez-vous que ce chemin est correct
  },

  // Votre configuration pour assetPrefix (pour déploiement)
  assetPrefix:
    process.env.NODE_ENV === 'production'
      ? process.env.NEXT_PUBLIC_SITE_URL || '' 
      : '',

  // Configuration pour améliorer Fast Refresh
  webpack: (config, { dev, isServer }) => {
    // Uniquement pour le développement
    if (dev) {
      // S'assurer que les plugins HMR sont activés
      config.optimization.moduleIds = 'named';
      
      // Éviter les transformations de modules non nécessaires
      config.watchOptions = {
        aggregateTimeout: 300,
        poll: false,
        ignored: ['**/node_modules', '**/.git']
      };
      
      // Amélioration du cache pour le développement
      config.cache = {
        type: 'filesystem',
        buildDependencies: {
          config: [__filename]
        }
      };
    }
    return config;
  },

  // Votre configuration pour onDemandEntries (peut être gardée si utile)
  onDemandEntries: {
    maxInactiveAge: 60 * 60 * 1000, // 1 heure
    pagesBufferLength: 5,
  },
};

// Ajout de configuration pour éviter les erreurs d'authentification
nextConfig.env = {
  ...nextConfig.env,
  NEXTAUTH_URL: process.env.NEXTAUTH_URL || 'https://' + process.env.REPL_SLUG + '.' + process.env.REPL_OWNER + '.repl.co',
};

module.exports = nextConfig;
